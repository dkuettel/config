#!/bin/zsh
set -eu -o pipefail

# > with-venv --python python3.10 -r requirements.txt -- python test.py -y --path=/here
# > with-venv --embedded test.py -- python test.py -y --path=/here

zparseopts -D -E -F -A opts - -python: r: -embedded:
if [[ $1 == '--' ]]; then shift; fi

if [[ -v opts[--embedded] ]]; then
    if sed -n -E '/^"""! [^ ]+ requirements$/ , /^""".*$/ {q1}' $opts[--embedded]; then
        echo "Cannot find embedded requirements in" $opts[--embedded] "." >&2
        exit 1
    fi
    # TODO doesnt complain if you have more than one requirements section
    python=$(sed -n -E 's/^"""! ([^ ]+) requirements$/\1/p' $opts[--embedded])
    requirements=$(sed -n -E '/^"""! [^ ]+ requirements$/ , /^""".*$/ { /^"""/d; p }' $opts[--embedded])
    $0 --python $python -r <(print -- $requirements) -- $@
    exit
fi

python=${opts[--python]:-python3.10}
requirements=$(sort $opts[-r])

venvs=~/.cache/with-venv/venvs
sha=$(sha256sum <(print -l -- $python $requirements) | cut -f 1 -d ' ')
venv=$venvs/$sha

if [[ -e $venv ]]; then
    print -- 'using venv at' $venv
else
    print -- 'creating venv at' $venv
    mkdir -p $venv
    print -l -- $requirements > $venv/requirements.txt
    # NOTE maybe also install $python version on-demand
    $python -m venv --upgrade-deps $venv
    $venv/bin/pip install --upgrade pip pip-tools
    $venv/bin/pip install -r $venv/requirements.txt
fi

path=($venv/bin $path)
export VIRTUAL_ENV=$venv
$@
